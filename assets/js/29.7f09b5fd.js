(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{359:function(t,v,_){"use strict";_.r(v);var a=_(0),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("在接触过大量的传统关系型数据库后你可能会有一些新的问题: "),v("strong",[t._v("无法整理成表格的海量数据该如何储存? 在数据非常稀疏的情况下也必须将数据存储成关系型数据库吗? 除了关系型数据库我们是否还有别的选择以应对Web2.0时代的海量数据?")])]),t._v(" "),v("p",[t._v("如果你也曾经想到过这些问题, 那么HBase将是其中的一个答案, 它是非常经典的列式存储数据库. 本文首先介绍HBase的由来以及其与关系数据库的区别, 其次介绍其访问接口、数据模型、实现原理和运行机制. 即便之前没有接触过HBase的相关知识也不影响阅读该文章.")]),t._v(" "),v("p",[v("img",{attrs:{src:"/screen_shot/hbase.png",alt:"hbase-logo"}})]),t._v(" "),v("p",[t._v("如果想了解其他的非关系型数据库也可以查看文章:"),v("RouterLink",{attrs:{to:"/pages/bd7866/"}},[t._v("NoSQL数据库")])],1),t._v(" "),v("h2",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),v("p",[t._v("HBase是谷歌公司BigTable的开源实现. 而BigTable是一个分布式存储系统, 使用谷歌分布式文件系统GFS作为底层存储, 主要用来存储非结构化和半结构化的松散数据. HBase的目标是处理非常庞大的表, 可以通过水平扩展的方式利用廉价计算机集群处理超过10亿行数据和百万列元素组成的数据表.")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("GFS、HDFS、BigTable、HBase的关系")]),t._v(" "),v("p",[t._v("HDFS是GFS的开源实现. HBase是BigTable的开源实现.")]),t._v(" "),v("p",[t._v("GFS是BigTable的底层文件系统, BigTable的数据存储在GFS上.")]),t._v(" "),v("p",[t._v("HDFS是HBase的底层存储方式. 虽然HBase可以使用本地文件系统, 但是为了提高数据可靠性一般还是会选择HDFS作为底层存储.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("项目")]),t._v(" "),v("th",[t._v("BigTable")]),t._v(" "),v("th",[t._v("HBase")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("文件存储系统")]),t._v(" "),v("td",[t._v("GFS")]),t._v(" "),v("td",[t._v("HDFS")])]),t._v(" "),v("tr",[v("td",[t._v("海量数据处理系统")]),t._v(" "),v("td",[t._v("MapReduce")]),t._v(" "),v("td",[t._v("Hadoop MapReduce")])]),t._v(" "),v("tr",[v("td",[t._v("协同服务系统")]),t._v(" "),v("td",[t._v("Chubby")]),t._v(" "),v("td",[t._v("Zookeeper")])])])]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[t._v("HBase和BigTable底层技术对应关系")])])]),t._v(" "),v("p",[t._v("与传统的数据库相比主要区别在于:")]),t._v(" "),v("ol",[v("li",[v("em",[v("strong",[t._v("数据类型")])]),t._v(": 关系数据库采用关系模型, HBase则采用更加简单的数据模型--将数据存储为未经解释的字符串.")]),t._v(" "),v("li",[v("em",[v("strong",[t._v("数据操作")])]),t._v(": 关系数据库通常包括丰富的操作, 涉及复杂的多表连接. HBase则不存在复杂的多表关系, 只有简单的增删查改.")]),t._v(" "),v("li",[v("em",[v("strong",[t._v("存储模式")])]),t._v(": 关系数据库是基于行模式存储的, 元组或行被连续地存储在磁盘中. HBase是基于列存储的.")]),t._v(" "),v("li",[v("em",[v("strong",[t._v("数据索引")])]),t._v(": 关系数据库可以针对不同列构建复杂的多个索引以提高访问效率. HBase则只有一个索引--行键.")]),t._v(" "),v("li",[v("em",[v("strong",[t._v("数据维护")])]),t._v(": 关系数据库中更新操作会用新值替换旧值. HBase则会保留旧数据, 仅仅生成一个新的版本.")]),t._v(" "),v("li",[v("em",[v("strong",[t._v("可伸缩性")])]),t._v(": 关系数据库很难进行横向扩展, 纵向扩展的空间也比较有限. HBase作为分布式数据库可以轻易地通过增加集群中的机器数量来达到性能的伸缩.")])]),t._v(" "),v("h2",{attrs:{id:"访问接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问接口"}},[t._v("#")]),t._v(" 访问接口")]),t._v(" "),v("p",[t._v("HBase提供了多种访问方式, 不同的方式适用于不同的场景.")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("特点")]),t._v(" "),v("th",[t._v("场合")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Native Java API")]),t._v(" "),v("td",[t._v("最常规高效的访问方式")]),t._v(" "),v("td",[t._v("适合Hadoop MapReduce作业并行批处理HBase表数据")])]),t._v(" "),v("tr",[v("td",[t._v("HBase Shell")]),t._v(" "),v("td",[t._v("HBase的命令行工具, 最简单的接口")]),t._v(" "),v("td",[t._v("适合HBase管理")])]),t._v(" "),v("tr",[v("td",[t._v("Thrift Gateway")]),t._v(" "),v("td",[t._v("利用Thrift序列化技术, 支持C++, PHP, Python等多种语言")]),t._v(" "),v("td",[t._v("适合其他异构系统访问HBase")])]),t._v(" "),v("tr",[v("td",[t._v("REST Gateway")]),t._v(" "),v("td",[t._v("解除语言限制")]),t._v(" "),v("td",[t._v("支持REST风格的HTTP API访问HBase")])]),t._v(" "),v("tr",[v("td",[t._v("Pig")]),t._v(" "),v("td",[t._v("使用Pig Latin流式编程语言来处理HBase的数据")]),t._v(" "),v("td",[t._v("适合做数据统计")])]),t._v(" "),v("tr",[v("td",[t._v("Hive")]),t._v(" "),v("td",[t._v("简单")]),t._v(" "),v("td",[t._v("可以用类似SQL语言的方式来访问")])])])]),t._v(" "),v("h2",{attrs:{id:"数据模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据模型"}},[t._v("#")]),t._v(" 数据模型")]),t._v(" "),v("p",[t._v("数据模型是一个数据库产品的核心, 接下来将介绍HBase列族数据模型并阐述HBase数据库的概念视图和物理视图的差异.")]),t._v(" "),v("h3",{attrs:{id:"相关概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),v("p",[t._v("HBase实际上是一个稀疏、多维、持久化存储的映射表, 采用行键、列族、列限定符和时间戳进行索引, 每个值都是未经解释的字节数组byte[].")]),t._v(" "),v("h4",{attrs:{id:"表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表"}},[t._v("#")]),t._v(" 表")]),t._v(" "),v("p",[t._v("表由行和列组成, 列被分为若干个列族")]),t._v(" "),v("h4",{attrs:{id:"行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行"}},[t._v("#")]),t._v(" 行")]),t._v(" "),v("p",[t._v("每个HBase表都由若干行组成, 每个行由行键(Row Key)进行标识.")]),t._v(" "),v("p",[t._v("访问表中的行有3种方式:")]),t._v(" "),v("ol",[v("li",[t._v("通过单个行键访问")]),t._v(" "),v("li",[t._v("通过行键区间访问")]),t._v(" "),v("li",[t._v("全表扫描")])]),t._v(" "),v("p",[t._v("行键可以是任意字符串(最大长度64KB, 实际应用中一般为10-100字节). 在HBase内部将行键保存为 "),v("mark",[t._v("字节数组")]),t._v(", 按照行键的 "),v("mark",[t._v("字典序")]),t._v(" 排序. 所以在设计行键时可以充分考虑该特性, 将需要一起读的行存储在一起.")]),t._v(" "),v("h4",{attrs:{id:"列族"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列族"}},[t._v("#")]),t._v(" 列族")]),t._v(" "),v("p",[t._v("HBase中一个表被分为多个列族, 列族是最基本的访问控制单元. "),v("mark",[t._v("表中的每个列都必须属于一个列族")]),t._v(", 我们可以将其理解为 "),v("mark",[t._v("把列按照需求分到不同的组中, 就如同整理文件到不同的文件夹中去")]),t._v(".")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("为什么要这么做?")]),t._v(" "),v("ol",[v("li",[t._v("控制权限. 我们通过列族可以实现权限的控制, 例如某些应用只可以修改某些数据.")]),t._v(" "),v("li",[t._v("获得更高的压缩率. 同一个列族中的所有数据都属于同一种数据类型, 着通常意味着更高的压缩率.")])])]),t._v(" "),v("div",{staticClass:"custom-block danger"},[v("p",{staticClass:"custom-block-title"},[t._v("缺点")]),t._v(" "),v("ol",[v("li",[t._v("列族数量不可太多. HBase的一些缺陷导致列族只能有几十个.")]),t._v(" "),v("li",[t._v("不能频繁修改.")])])]),t._v(" "),v("h4",{attrs:{id:"列限定符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列限定符"}},[t._v("#")]),t._v(" 列限定符")]),t._v(" "),v("p",[t._v("列族中的数据是通过列限定符来定位的. 列限定符无需事先定义, 也没有数据类型, 总被视为字节数组byte[].")]),t._v(" "),v("h4",{attrs:{id:"单元格"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单元格"}},[t._v("#")]),t._v(" 单元格")]),t._v(" "),v("p",[t._v('在HBase的表中, 通过行、列和列限定符可以确定一个"单元格(Cell)". 单元格中存储的数据没有数据类型, 总被视为字节数组byte[].')]),t._v(" "),v("p",[t._v("每个单元格中可以保留一个数据的多个版本, 每个版本对应一个不同的时间戳.")]),t._v(" "),v("h4",{attrs:{id:"时间戳"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间戳"}},[t._v("#")]),t._v(" 时间戳")]),t._v(" "),v("p",[t._v("每个单元格都保留了同一个数据的多个版本, 这些版本采用时间戳进行索引. 事实上每一次对于一个单元格执行的操作(增删改)时, HBase都会自动生成并存储一个时间戳, 通常这个时间戳是64位整型. 当然, 这个时间戳也可以由用户自己赋值, 用以避免应用程序中出现数据版本冲突.")]),t._v(" "),v("p",[t._v("一个单元格中的不同版本的数据是以时间戳降序排序的, 以便于读到最新的数据版本.")]),t._v(" "),v("br"),t._v(" "),v("p",[t._v("我认为下面的一张图可以很好地表述上面的5个概念. 类比于关系数据库, 行键就是主键行号, 列限定符就是列名, 列族就是列名组成小组的组名, 单元格就是具体存储数据的格子, 时间戳则标识了一个单元格中不同时间的数据版本.")]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[v("img",{attrs:{src:"/screen_shot/hbase-example.jpg",alt:"hbase-example"}})]),t._v(" "),v("p",[t._v("一个HBase数据模型的实例")])]),v("h3",{attrs:{id:"数据坐标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据坐标"}},[t._v("#")]),t._v(" 数据坐标")]),t._v(" "),v("p",[t._v("相较于我们所熟悉的关系数据库, HBase无法仅使用行号和列号确定一个数据. 在HBase中, 我们需要: "),v("mark",[t._v("行键、列族、列限定符和时间戳")]),t._v(" 这4个东西来确定一个数据.")]),t._v(" "),v("p",[t._v("[行键, 列族, 列限定符, 时间戳]被称为是HBase的坐标, 可以通过这个坐标来直接访问数据. == 在这种层面上讲, HBase也可以被视为一个键值数据库.==")]),t._v(" "),v("h3",{attrs:{id:"概念视图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念视图"}},[t._v("#")]),t._v(" 概念视图")]),t._v(" "),v("p",[t._v("在HBase的概念视图中, 一个表是一个稀疏、多维的映射关系.")]),t._v(" "),v("table",[v("tr",[v("th"),t._v(" "),v("th",[t._v("时间戳")]),t._v(" "),v("th",[t._v("列族 contents")]),t._v(" "),v("th",[t._v("列族 anchor")])]),t._v(" "),v("tr",[v("td",{attrs:{rowspan:"2"}},[t._v("com.cnn.www")]),t._v(" "),v("td",[t._v("t5")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v('anchor:cnnsi.com="CNN"')])]),t._v(" "),v("tr",[v("td",[t._v("t4")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v('anchor:my.look.ca="CNN.com"')])]),t._v(" "),v("tr",[v("td",{attrs:{rowspan:"3"}},[t._v("com.cnn.www")]),t._v(" "),v("td",[t._v("t3")]),t._v(" "),v("td",[t._v('contents:html="xxxx"')]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("t2")]),t._v(" "),v("td",[t._v('contents:html="xxxx"')]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("t1")]),t._v(" "),v("td",[t._v('contents:html="xxxx"')]),t._v(" "),v("td")])]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[t._v("HBase概念视图")])]),v("p",[t._v("上表存储了一个网页的页面内容(html代码)和一些反向连接. contents中存储的是网页内容, anchor中存储的是反向连接. 不过有几个地方需要额外注意:")]),t._v(" "),v("ol",[v("li",[t._v("行键. 行键采用的是url的倒序, 因为HBase的行键采用字典倒序排列, 这样可以使得相同的网页都保存在相邻的位置")]),t._v(" "),v("li",[t._v("每个行都包含了相同的列族, 即便有些列族不需要存储数据(为空)")])]),t._v(" "),v("h3",{attrs:{id:"物理视图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#物理视图"}},[t._v("#")]),t._v(" 物理视图")]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[t._v("列族 contents")])]),v("table",[v("tr",[v("th"),t._v(" "),v("th",[t._v("时间戳")]),t._v(" "),v("th",[t._v("列族 contents")])]),t._v(" "),v("tr",[v("td",{attrs:{rowspan:"3"}},[t._v("com.cnn.www")]),t._v(" "),v("td",[t._v("t3")]),t._v(" "),v("td",[t._v('contents:html="xxxx"')])]),t._v(" "),v("tr",[v("td",[t._v("t2")]),t._v(" "),v("td",[t._v('contents:html="xxxx"')])]),t._v(" "),v("tr",[v("td",[t._v("t1")]),t._v(" "),v("td",[t._v('contents:html="xxxx"')])])]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[t._v("列族 anchor")])]),v("table",[v("tr",[v("th"),t._v(" "),v("th",[t._v("时间戳")]),t._v(" "),v("th",[t._v("列族 anchor")])]),t._v(" "),v("tr",[v("td",{attrs:{rowspan:"2"}},[t._v("com.cnn.www")]),t._v(" "),v("td",[t._v("t5")]),t._v(" "),v("td",[t._v('anchor:cnnsi.com="CNN"')])]),t._v(" "),v("tr",[v("td",[t._v("t4")]),t._v(" "),v("td",[t._v('anchor:my.look.ca="CNN.com"')])])]),t._v(" "),v("div",{staticClass:"center-container"},[v("p",[t._v("HBase物理视图")])]),v("p",[t._v("我们可以轻易发现, 在物理的存储层面上来看HBase采用了基于列的存储方式, 而不是传统关系数据库那样基于行来存储. 这也是HBase与传统关系数据库间的重要区别.")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("与概念视图的不同")]),t._v(" "),v("ol",[v("li",[t._v("列族的分开存放. 可以看到contents和anchor两个列族被分开存放.")]),t._v(" "),v("li",[t._v("不存在空值. 在概念视图中有些列是空的, 但是在物理视图中这些值根本不会被存储.")])])]),t._v(" "),v("p",[v("br"),v("br"),v("br")]),t._v(" "),v("blockquote",[v("p",[t._v("待补充内容")]),t._v(" "),v("h2",{attrs:{id:"实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),v("h2",{attrs:{id:"运行机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#运行机制"}},[t._v("#")]),t._v(" 运行机制")])]),t._v(" "),v("br"),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("参考资料")]),t._v(" "),v("ol",[v("li",[v("a",{attrs:{href:"https://book.douban.com/subject/27606713/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《大数据技术原理与应用(第2版)》"),v("OutboundLink")],1)])])])])}),[],!1,null,null,null);v.default=s.exports}}]);